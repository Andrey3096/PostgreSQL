# Утилита pg_dump
Для создания резервной копии базы данных в Postgres используется утилита pg_dump. Ключами можно задать формат резервной копии: plain, custom, directory.

#plain
Данный формат представляет собой набор sql команд, создающих все объекты в базе данных. Глобальные объекты всего кластера бд (роли, табличные пространства) должны быть созданы отдельньно, поскольку они не относятся к конкретной бд.

student:~$ pg_dump -d replication_db -f /home/student/replication_db.sql

Чтобы восстановить объекты из резервной копии, достаточно выполнить полученный скрипт в psql.

student:~$ psql -d replication_db -f /home/student/replication_db.sql

После восстановления базы имеет смысл выполнить команду ANALYZE: она соберет статистику, необходимую оптимизатору для планирования запросов.

replication_db=# analyze;
ANALYZE

--clean
Включить в выходной файл команды удаления DROP всех выгружаемых объектов базы данных перед командами создания этих объектов. При заполнении бд новыми объектами, можем привести к потере данных
--format. p,c,d
--no-owner
Не формировать команды, устанавливающие владельца объектов базы данных.
--create
Сформировать в начале вывода команду для создания базы данных и затем подключения к ней.

# custom
Формат custom (-F c, --format=custom) создает резервную копиюв специальном формате, содержащем не только объекты, но и оглавление. Наличие оглавления позволяет выбирать объекты для восстановления не при создании копии, а непосредственно при восстановлении. 

student:~$ pg_dump -C -c -d replication_db -Fc -f /home/student/replication.dump

Ключ -l формата custom выводит оглавление бд replication в доступный для редактирования текстовый файл db.list, редактируя который можно выбирать объекты, которые мы хотим восстановить.
student:~$ pg_restore -l replication.dump > db.list

В ключе -L указывается файл с оглавлением.
student:~$ pg_restore -L db.list -d replication_db replication.dump

# directory
Формат directory интересен тем, что позволяет выгружать данные в несколько параллельных потоков.

student:~$ pg_dump -C -c -d backup_db -Fd -j 2 -f /home/student/replication_db.directory

Восстановление из формата directory так же возможно в несколько потоков в количестве, указанном ключом -j.

student:~$ pg_restore -d postgres /home/student/replication_db.directory

# Утилита pg_dumpall
Чтобы создать резервную копию всего кластера, включая роли и табличные пространства, можно воспользоваться утилитой pg_dumpall. 
Результатом работы pg_dumpall является скрипт для psql. Другие форматы не поддерживаются. Это означает, что pg_dumpall не поддерживает параллельную выгрузку данных, что может оказаться проблемой при больших объемах данных. В таком случае можно воспользоваться ключом --globals-only, чтобы выгрузить только роли и табличные пространства, а сами базы данных выгрузить отдельно с помощью pg_dump в параллельном режиме.

student:~$ pg_dumpall --clean --globals-only -U postgres -f /home/student/all_cluster.sql

На практике резервное копирование кластера бд происходит по следующему сценарию.
Шаг 1: выгружаются глобальные объекты кластера бд утилитой pg_dumpall с ключом --globals-only
Шаг 2: копирование бд утилитой pg_dump c последующим восстановлением в целевом кластере. 
 Для небольших бд подойдет формат plain:
student:~$ psql -p 5434 -U postgres -f /home/student/replication_db.sql
 
 Другие же имеет смысл восстанавливать в несколько потоков из формата directory. 
student:~$ pg_restore -p 5434 -d postgres --create /home/student/backup_db.directory
