****************************************************************************************                                Логическая репликация                                *
***************************************************************************************

В отличие от односторонней передачи файлов или потока записей в случае физической репликации, в логической у серверов нет выделенных ролей. У сервера нет выделенной роли: один и тот же сервер может как публиковать изменения, так и подписываться на другие (или даже свои) публикации. Двоичная совместимость серверов не требуется, но в журнале публикующего сервера необходима дополнительная информация (параметр wal_level = logical).

При логической репликации операции DDL не передаются по подписке.

replication_logical=> CREATE TABLE test(id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, descr text, additional text);
CREATE TABLE

| replication_logical=> CREATE TABLE test(id int PRIMARY KEY GENERATED BY DEFAULT AS   |IDENTITY, descr text, additional text);
|CREATE TABLE ; // структура таблицы на подписчике может отличаться

student:~$ psql -U postgres -c "ALTER SYSTEM SET wal_level=logical" // для указания принадлежности изменений в журнале к определенным таблицам
student:~$ sudo pg_ctlclustewr 13 alpha restart

replication_logical=# CREATE PUBLICATION test_pub FOR table test;
CREATE PUBLICATION
replication_logical=# \dRp+
                            Publication test_pub
  Owner   | All tables | Inserts | Updates | Deletes | Truncates | Via root 
----------+------------+---------+---------+---------+-----------+----------
 postgres | f          | t       | t       | t       | t         | f
Tables:
    "public.test"

| replication_logical=# CREATE SUBSCRIPTION test_sub
| CONNECTION 'port=5432 user=student dbname=replication_logical'
| PUBLICATION test_pub;
| NOTICE:  created replication slot "test_sub" on publisher
| CREATE SUBSCRIPTION

replication_logical=# \dRs
            List of subscriptions
   Name   |  Owner   | Enabled | Publication 
----------+----------+---------+-------------
 test_sub | postgres | t       | {test_pub}
(1 row)

| replication_logical=> select * from pg_stat_subscription \gx
| -[ RECORD 1 ]---------+------------------------------
| subid                 | 32795
| subname               | test_sub
| pid                   | 16616
| relid                 | 
| received_lsn          | 0/1000AD60
| last_msg_send_time    | 2024-03-03 14:23:50.979476+03
| last_msg_receipt_time | 2024-03-03 14:23:50.979507+03
| latest_end_lsn        | 0/1000AD60
| latest_end_time       | 2024-03-03 14:23:50.979476+03

student:~$ ps -o pid,command --ppid `sudo head -n 1 /var/lib/postgresql/13/beta/postmaster.pid`
    PID COMMAND
  12742 postgres: 13/beta: checkpointer 
  12743 postgres: 13/beta: background writer 
  12744 postgres: 13/beta: walwriter 
  12745 postgres: 13/beta: autovacuum launcher 
  12746 postgres: 13/beta: archiver failed on 00000003000000000000000E
  12747 postgres: 13/beta: stats collector 
  12748 postgres: 13/beta: logical replication launcher 
  16616 postgres: 13/beta: logical replication worker for subscription 32795 

Когда транзакция фиксируется, ее изменения передаются модулю вывода, который декодирует их и представляет в платформо-независимом (текстовом) формате. Процесс wal sender передает эти декодированные сообщения подписчику (если он на них подписан) через слот логической репликации. 

replication_logical=# SELECT pg_create_logical_replication_slot('test_slot','test_decoding');

replication_logical=> SELECT * FROM pg_logical_slot_get_changes('test_slot', NULL, NULL);
    lsn     | xid |                                       data                 >
------------+-----+------------------------------------------------------------>
 0/11009A80 | 515 | BEGIN 515
 0/11009A80 | 515 | table public.test: UPDATE: id[integer]:1 descr[text]:'Five'>
 0/11009BE0 | 515 | COMMIT 515
(3 rows)

